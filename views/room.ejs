<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>room</title>
    <style>body{
        padding: 0;
        margin: 0;
        font-family: WF Visual Sans Text,Arial,sans-serif;
        height: 100vh;
        width: 100vw;
    }
    header{
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0px 0px 5px black;
        
        padding: 0 10px 0 10px;
        height: 7vh;
    }
    ul{
        display: flex;
        gap: 4vw;
    }
    li{
        list-style: none;
        cursor:pointer;
        display: flex;
        
    }
    header h2{
            color: #1d73f5;
            cursor:pointer;
            font-size: 20px;
            
        }
    main{
        height: 80vh;
        
    }
    footer{
        display: flex;
        justify-content: space-around;
    }
    footer input{
        width: 69vw;
        height: 30px;
        border-radius: 10px;
    }
    footer button{
        width: 20vw;
        border-radius: 10px;
        height: 36px;
        cursor:pointer
    }
    footer p{
        width: 7vw;
        border-radius: 10px;
        border: 2px solid black;
        height: 30px;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 30px;
        font-weight: 600;
        cursor: pointer;
    }
    .disNotify{
        height: 4vh;
        border: 2px solid black;

    }
    #notificationBar{
        height: 20px;
       
        font-size: 12px;
        text-align: center;
    }
    #notificationBar p{
        margin: 0;
        padding: 0;
        margin-top: 3px;
    }
    #displayMsg{
        overflow-y: scroll;
        height: 78vh;
    }
    .userMsgBlock{
        border: 2px solid black;
    margin: 4px;
    padding: 5px;
    max-width: 80vw;
    width: fit-content;
    border-radius: 10px;
    min-width: 60px;
    }
    .userMsgBlockName{
        height: 20px;
        font-size: 12px;
    }
    .userMsgBlockTime{
        font-size: 10px;
        margin-top: 11px;
        display: flex;
        justify-content: space-between;
    }
    .userMsgBlockMsg{
        overflow-wrap: break-word;
    }
    .userMsgBlockSelf{
        float: right;
        background-color: #8dbaff;
    }
    .wrapperSelf{
        min-height: 84px;
    }
    .msgStatus{
        font-weight: 600;
    }
    
    </style>
</head>
<body>
    <header>
        <h2>
            <%= room %>
        </h2>
        <ul>

            <li ><img src="/photos/eye.png" alt="eye img" height="17px"><div id="peopleInRoom"></div></li>
            <li>exit group</li>
        </ul>
    </header>
    <main>
        <div id="notificationBar"></div>

       <div id="displayMsg"></div>
    </main>
    <footer>
        <p>+</p>
        <input type="text" id="inputMsg" placeholder="enter message" maxlength="200" required>
        <button id="btn">send</button>
        
    </footer>
    <script src="socket.io/socket.io.js"></script>
    <script>
        
        const msgInput = document.querySelector("#inputMsg")
        const button =  document.querySelector("#btn")
        const displayMsg = document.querySelector("#displayMsg")
        const notificationBar = document.querySelector("#notificationBar")
        const peopleInRoom = document.querySelector("#peopleInRoom")
        const user = <%- JSON.stringify(user) %>; 
        
        const socket = io()
        const room = '<%= room %>'
        console.log(user)
        socket.emit("joined-room" , {user,room})
        socket.emit("HowManyUsersInRoom" , room)
        
        button.addEventListener("click" , sendBtnClicked)

        let isKeyPressed = false;

        window.addEventListener("keydown", (event) => {
        if (event.key === "Enter" && !isKeyPressed) {
        isKeyPressed = true; // Mark key as pressed
        sendBtnClicked();
            }
        });

        window.addEventListener("keyup", (event) => {
        if (event.key === "Enter") {
        isKeyPressed = false; // Reset key press state
    }
});
        socket.on("newUserJoinedMessage" , (name)=>{
            notificationBar.innerHTML = `<p><b>${name}</b> joined the chat<p>`
            
        })
        socket.on("userDisconnected" , (name)=>{
            notificationBar.innerHTML = `<p> <b>${name}</b> has left the chat<p>`
            
        })

        socket.on("userMessage" , ({userName , message ,messageId , userId})=>{
            displayMsg.innerHTML +=  `<div class="wrapper ">
                <div class="userMsgBlock " >
            <div class="userMsgBlockName">${userName}</div>
            <div class="userMsgBlockMsg">${message}</div>
            <div class="userMsgBlockTime">3:30 pm</div>
            </div>
            </div>`

            displayMsg.scrollTop = displayMsg.scrollHeight;

            socket.emit("messageStatusSeen" , {room , messageId , userId})
        })  
        let typingTimeout; 
        window.addEventListener("keypress" , ()=>{
        socket.emit("someoneIsTyping" , room)
        clearTimeout(typingTimeout);
        
         typingTimeout = setTimeout(() => {
        socket.emit("stoppedTyping", room);
        

        }, 2000);

       
        })

        socket.on("someoneIsTyping" , (name)=>{
            notificationBar.innerHTML = `<p> <b>${name}</b> is typing...<p>`
           
        })

        socket.on("stoppedTyping", () => {
        notificationBar.innerHTML = ""; 
        });

        socket.on("thisManyUsersInRoom" , (data)=>{
           if(data.room == room) peopleInRoom.innerHTML = data.usersInRoom
        })

        socket.on("messageStatus" , (messageId)=>{
            let msgBlockToUpdate = document.querySelector(`#${messageId}`)
            msgBlockToUpdate.innerHTML = "send"
        })

        socket.on("messageStatusSeen" , (messageId , userId )=>{
            console.log(messageId , userId)
            if(userId == user.id){
            let msgBlockToUpdate = document.querySelector(`#${messageId}`)
            msgBlockToUpdate.innerHTML = "seen"
            }
        })
        

        function generateMessageId() {
        const id = Math.random().toString(36).substring(2, 10) + Date.now().toString(36);
        return `id_${id}`
        }
        
         

         function sendBtnClicked(){
            const msgToSend = msgInput.value;
            if(!msgToSend){
                return 
            }
            const messageId = generateMessageId();
            socket.emit("send-message" , {room , message:msgToSend ,messageId })
            displayMsg.innerHTML +=  `<div class="wrapper wrapperSelf">
                <div class="userMsgBlock userMsgBlockSelf" >
            <div class="userMsgBlockName">${user.name}</div>

            <div class="userMsgBlockMsg">${msgToSend}</div>
            <div class="userMsgBlockTime">3:30 pm <div id="${messageId}" class="msgStatus"></div></div>
           
            </div>
            </div>`

            displayMsg.scrollTop = displayMsg.scrollHeight;
        }
        const map = '<%= messages %>'
        console.log("this is hashmap" ,  map.message)


    </script>
    </body>
</html>